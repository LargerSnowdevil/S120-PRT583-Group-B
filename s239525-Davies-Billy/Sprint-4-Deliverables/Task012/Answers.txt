Understanding the Concept:
The adapter pattern is a structural pattern designed to allow two incompatible classes work together
which otherwise couldnt because of incompatible interfaces.

Intent:
Create an adapter for a program that draws shapes on the screen. The program
is going to reuse code from another piece of software but the reused code is not
compatible and will need an adapter to work.
Problem:
We have already created a class for drawing , which draws many kinds of other shapes.
But we want to reuse code for drawing squares from another piece of software.

The new software expects different input and outputs than the reused piece of code
and an adapter will have to be made to allow the incompatible interfaces to work together.

Benefits\Motivation to Refactor:
Can reuse old code instead of writing new code from scratch

Time Quoted: 1 hour

Time Taken: 1 hour

Before:


Draw(ShapeName,Height, width):
        """
        A function which draws shapes on the screen. Takes in the name of the shape
        and the height and width of the object
        """


Circle(Circumference):
      """
      Takes in the circumference of the circle then calculates the height and width of
      the circle to draw then calls the draw functionto draw it with those values.
      """

      Draw("Circle",Height,Width)

Triangle(Side,base):
      """
      Takes in the length of the side and base of a triangle and then
      Converts it to a height and width for the draw function to use

      """
      Draw("Triangle",Height,Width)

Square(LengthOfSide):
      """
      Old reused function that takes in the length of the side of a square
      and returns the length multiplied by 4, wont work with the draw function
      """
      return  LengthOfSide * 4

Triangle(10,10): #Will work
Circle(30) # Will work
Square(5) #Would not work with Draw

After:
Draw(ShapeName,Height, width):
        """
        A function which draws shapes on the screen. Takes in the name of the shape
        and the height and width of the object
        """


Circle(Circumference):
      """
      Takes in the circumference of the circle then calculates the height and width of
      the circle to draw then calls the draw functionto draw it with those values.
      """

      Draw("Circle",Height,Width)

Triangle(Side,base):
      """
      Takes in the length of the side and base of a triangle and then
      Converts it to a height and width for the draw function to use

      """
      Draw("Triangle",Height,Width)

Square(LengthOfSide):
      """
      Old reused function that takes in the length of the side of a square
      and returns the length multiplied by 4, wont work with the draw function
      """
      return  LengthOfSide * 4



AdapterForSquare(LengthOfSide):
      """
      This adapter can convert the return of the square function
      into something that the draw functioncan understand and make use of
      """
      height = square(LengthOfSide)
      width = height
      Draw(square,height,width)

Triangle(10,10): #Will work
Circle(30) # Will work
AdapterForSquare(5) #Would now work with draw
