// Base prototype
class CreateVector is
    CreateVector(int field X, int field Y) 
    int x, y
    field suburb: string

Abstract class GeoStructure is
    field X: int
    field Y: int
    CreateVector

    // A regular constructor.
    constructor GeoStructure() is

    // The prototype constructor. A fresh object is initialized
    // with values from the existing object.
    constructor GeoStructure(source: GeoStructure) is
        this()
        this.X = source.X
        this.Y = source.Y
        this. suburb = source. suburb

    // The clone operation returns one of the GeoStructure subclasses.
    abstract method clone():GeoStructure

// The cloning method creates a new object
// and passes it to the constructor. Until the constructor is
// finished, it has a reference to a fresh clone. Therefore,
// nobody has access to a partly-built clone. This keeps the
// cloning result consistent.
class Rectangle extends GeoStructure is
    field width: int
    field height: int

    constructor Rectangle(source: Rectangle) is
        // A parent constructor call is needed to copy private
        // fields defined in the parent class.
        super(source)
        this.width = source.width
        this.height = source.height

    method clone():GeoStructure is
        return new Rectangle(this)


class Circle extends GeoStructure is
    field radius: int

    constructor Circle(source: Circle) is
        super(source)
        this.radius = source.radius

    method clone():GeoStructure is
        return new Circle(this)

// Somewhere in the client code.
class CreateVector is
    field GeoStructure: array of GeoStructure

    constructor CreateVector() is
        Circle circle = new Circle()
        circle.X = 10
        circle.Y = 10
        circle.radius = 20
        GeoStructure.add(circle)

        Circle anotherCircle = circle.clone()
        GeoStructure.add(anotherCircle)
        // The `anotherCircle` variable contains an exact copy
        // of the `circle` object.

        Rectangle rectangle = new Rectangle()
        rectangle.width = 10
        rectangle.height = 20
        GeoStructure.add(rectangle)

    method businessLogic() is
        // Prototype rocks because it lets you produce a copy of
        // an object without knowing anything about its type.
        Array GeoStructureCopy = new Array of GeoStructure.

        // For instance, we don't know the exact elements in the
        // GeoStructure array. All we know is that they are all
        // GeoStructure. But thanks to polymorphism, when we call the
        // `clone` method on a GeoStructure the program checks its real
        // class and runs the appropriate clone method defined
        // in that class. That's why we get proper clones
        // instead of a set of simple GeoStructure objects.  
        foreach (s in GeoStructure) do
            GeoStructureCopy.add(s.clone())

        // The ` GeoStructureCopy` array contains exact copies of the
        // ` GeoStructure ` array's children
